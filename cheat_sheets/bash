
lsblk -  получить инфо о блочных устройствах таких как жесткие диски, флэшки и т.п. используйте команду 
uname -a - просмотреть информацию о системе linux
lscpu - получить информацию о CPU можно воспользоваться командами
fdisk -l - получить информацию о системных разделах используйте команду
cat /etc/*release* - информация о дистрибутиве

получить информацию об оборудовании в Linux:
dmidecode -t memory
dmidecode -t system
dmidecode -t bios
dmidecode -t processor






Проверяется текущая директория командой pwd:
$ pwd
/Users/guest



ls — программа, которая выводит список файлов и директорий в рабочей (текущей) директории.
$ ls
Desktop  Documents Downloads Library  Movies  Music  Pictures Public
ls также принимает на вход аргумент — директорию, которую нужно проанализировать.
Для просмотра полного содержимого директории Music с информацией о каждом файле достаточно набрать ls -la Music



# Выход на два уровня вверх
 Music$ cd ../..
$ pwd
/Users


вместо cd Music, можно писать cd ./Music. Оба эти выражения эквивалентны

команда cd, выполненная без аргументов, перебрасывает в домашную директорию текущего пользователя.

из любого места можно сделать прямой переход в любую поддиректорию домашней директории.
 <из любого места>$ cd ~/Music
  Music$ pwd
/Users/guest/Music


автозавершение имён выполняется двойным нажатием на клавишу Tab.


Информация о любом файле или директории доступна по команде stat (file system status):



Самый простой способ прочитать файл — команда cat.
Иногда бывает нужно посмотреть только начало файла или его конец, в такой ситуации помогают команды head и tail. Они тоже принимают на вход путь до файла, только head показывает первые 10 строк, а tail — последние 10 строк файла. Это поведение можно менять, задавая желаемое количество строк через опцию -n.tail, запущенный в особом режиме благодаря флагу -f. tail -f path/to/file не просто выводит последние строчки файла, но ждёт появления новых. Как только файл дописывается, tail сразу выводит на экран добавленные строки
head -n 6 /home/tirion/.bashrc

less предоставляет несколько десятков команд для перемещения по тексту и его поиску, про большинство из них можно прочитать в соответствующем мануале. Здесь же затронем основные:

    q — выход
    f — вперёд на страницу
    b — назад на страницу
    если набрать /, затем начать вводить буквы и нажать Enter, то выполнится поиск введённого текста. Перемещение по найденным совпадениям выполняется командой n (переход к следующему совпадению) и командой N (переход к предыдущему совпадению).

    
    
    
find — утилита поиска файлов по имени и другим свойствам, 
    
    
    
    
grep (global regular expression print), выполняющей поиск по файлу или файлам определённого текста. 
Найденные строчки выводятся на экран в том же порядке, в котором они встречаются в исходном файле. В некоторых ситуациях бывает важно увидеть не только саму строку, содержащую подстроку, но и то, что находится вокруг неё. Количество выводимых соседних строк регулируется опциями -B, -A и -C. Первая определяет количество отображаемых строк до искомой (-B, --before-context), вторая — после (-A, --after-context), а третья — до и после одновременно (-C, --context). Ниже пример использования -C со значением 1. Это значит, что для каждой найденной строки будет выведена одна строка выше и одна строка ниже.
$ grep -C 1 aliases .bashrc

Иногда мы не знаем, в каком файле то, что мы ищем, но знаем директорию, в которой лежит этот файл. В такой ситуации нужно сделать два изменения: Добавить опцию -R, которая говорит о том, что надо искать внутри директории (рекурсивно, то есть включая все поддиректории). Указать путь до директории, а не файла.
$ grep -R bashrc .

Для редактирования файлов в командной строке используют редакторы Nano, Vim и Emacs


утилита wc (word count — "количество слов"), которая умеет считать количество слов, строк или символов в файле. Когда мы говорим о файле, то в *nix это почти всегда означает, что данные можно передать и в стандартный поток ввода.

# Флаг l (l а не 1) говорит о том, что надо считать количество строк
$ wc -l < result



Перенаправление STDERR в STDOUT

# Сначала STDERR перенаправляется в STDOUT, затем STDOUT в файл
$ cd lala > output 2>&1
$ cat output
-bash: cd: lala: No such file or directory

2 в данном случае обозначает номер потока. В POSIX за каждым потоком закреплён определённый номер, который является файловым дескриптором, если быть точным: STDIN — 0, STDOUT — 1, STDERR — 2. Конструкцию 2>&1 нужно просто запомнить, она говорит о том, что поток с номером 2 отправляем в поток с номером 1.
Перенаправление обоих потоков в файл

# Сначала STDERR перенаправляется в STDOUT, затем STDOUT в файл
$ cd lala &> output
$ cat output
-bash: cd: lala: No such file or directory



пайплайн. пример
cat source | grep Dog | uniq | sort

    Читается файл source
    Входные данные грепаются по подстроке "Dog"
    Убираются дубли (в исходном файле две одинаковых строки "Dog")
    Входные данные сортируются и выводятся на экран

    
    
    
  Для создания файлов принято использовать утилиту touch.  
Основная задача утилиты поменять время последнего доступа к файлу, но она обладает побочным эффектом. Если файла не существует, то он будет создан 
touch empty-file


Удаляется файл командой rm (remove files):
rm empty-file


Переименование всегда равносильно перемещению, которое выполняется командой mv (move)
mv file renamed-file



Для копирования файлов и директорий используется утилита cp (copy). Её первый аргумент — имя источника (откуда), второй — имя приёмника (куда).
cp renamed-file renamed-file-copy
Для копирования директории нужно добавить флаг -r (recursive).


Создание директории выполняется командой mkdir (make directory).
mkdir my-dir
-p, который создаёт директории рекурсивно.
mkdir -p one/two/three

Удаление директорий выполняется той же командой, что и удаление файлов, но без флагов оно выдаёт предупреждение:

rm my-dir/
rm: cannot remove 'my-dir/': Is a directory
Если внутри директории есть файлы, то команда rm начнёт задавать вопрос по каждому из них, нужно ли его удалять. Если вы точно уверены, что удалить нужно всё, добавьте флаг -f. В таком случае rm удалит всю директорию без вопросов.
rm -rf one


Посмотреть установленные переменные окружения можно командой env (environment)

$ HOME=/tmp cd
Когда мы указали HOME=/tmp прямо перед командой cd, то переменная не была изменена для текущей сессии — она была изменена для запущенной команды, в данном случае cd. Такой трюк можно проделывать с любой командой. Другой способ установки изменяет значение глобально, для всей сессии и выполняется так:
~$ export HOME=/tmp



Посмотреть историю можно  выполнить команду history.
Используя номер команды в выводе history, можно выполнить повторный запуск без необходимости набирать или копировать команду из истории.
$ !2


При необходимости историю всегда можно погрепать:
$ history | grep export

реверсивный поиск. Если нажать комбинацию Ctrl + r, то запустится специальный поиск по истории. Он ожидает ввода символов и сразу отображает ближайшую команду, в которой эти символы встречаются. Если найденное соответствие вас не устроило, то повторное нажатие Ctrl + r выберет следующее соответствие из истории.



Команда whoami позволяет выяснить, кто же я такой:
$ whoami



Команда ps (process status) выводит отчёт о работающих процессах. Информацию о том, какой процесс и под каким пользователем запущен, можно получить из вывода ps aux:
$ ps aux
# Левый столбец имя пользователя


Посмотреть свой идентификатор можно разными способами. Первый способ — с помощью команды id:
$ id
Второй способ связан с просмотром одного важного файла, который является основным хранилищем пользователей в *nix-системах. Да, это обычный текстовый файл, как и всё остальное.
$ cat /etc/passwd
Кроме имени и идентификатора, здесь также указана домашняя директория пользователя (и её можно поменять), а также шелл по умолчанию. Запись /usr/sbin/nologin говорит о том, что данный пользователь не может входить в систему. Такие пользователи нужны для запуска программ, имеющих ограниченные права, и им, естественно, не нужно входить в систему.


Иногда бывает нужно выполнить команду из-под пользователя, отличного от root. Тогда придётся добавить флаг -u:
$ sudo -u nobody mkdir /tmp/test


Если стоит задача произвести сразу пачку действий от имени другого пользователя, то для этого можно запустить новую сессию поверх текущей:
$ sudo -i
Главное — не забыть переключиться обратно после завершения необходимых манипуляций. Для этого наберите exit.


1 	# 	Permission 	rwx 	Binary
2 	7 	read, write and execute 	rwx 	111
3 	6 	read and write 	rw- 	110
4 	5 	read and execute 	r-x 	101
5 	4 	read only 	r-- 	100
6 	3 	write and execute 	-wx 	011
7 	2 	write only 	-w- 	010
8 	1 	execute only 	--x 	001


Если вам интересно узнать, а где лежит исполняемый файл конкретной программы, то можно воспользоваться командой type (а ещё which и whereis):

~$ type cp
cp is /bin/cp
~$
~$ whereis cp
cp: /bin/cp
~$
~$ which cp
/bin/cp


Для ручного изменения переменной PATH нужно поправить один из конфигурационных файлов Bash.Добавьте в этот файл следующую строку:
export PATH=$PATH:/path/to/directory
 Эти файлы лежат в домашней директории пользователя:
    .bashrc
    .bash_profile
    .profile

    
    
    
    в системах Linux есть команда diff, с помощью которой можно выяснить различия между любыми файлами даже без использования СКВ. Эти изменения можно сохранить в файл, а затем, используя программу patch, применить к исходному файлу.

$ diff index.js index2.js > index.patch

1c1
< const a = 5;
---
> const a = 8;
3a4
> console.log(a - b);

$ patch index.js -i index.patch -o index2.js

